source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("C:/Users/Sampson/Desktop/RONNIE/NSS/seas_tests.R")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
cat("****\nCombined Test\n*****\n")
1703 %>%
set.seed()
library(seastests)
n <- seq(15, 500, 5)
variances <- seq(1, 4, 1)
power_list <- matrix(0, length(n),
length(variances))
colnames(power_list) <- variances
rownames(power_list) <- n
power_list
cat("****\nFor seasons = 12\n****\n")
for (k in seq_along(variances)) {
p <- rep(variances[k], length(n))
prob.trial <- matrix(0, length(n), length(p))
power.trial <- numeric(length(n))
for (j in 1:length(n)) {
for (i in 1:length(p)) {
data.trial <- arima.sim(n = n[j], model = list(sar = 0.8,
nseasons = 12, sigma2 = p[i]))
c.trial <- combined_test(data.trial, freq = 12)
prob.trial[j, i] <- c.trial$Pval
}
power.trial[j] <- 1 - (sum(prob.trial[j, ] > 0.05) / length(p))
}
power_list[, k] <- power.trial
}
library(tidyverse)
library(seastests)
library(forecast)
cat("****\nCombined Test\n*****\n")
1703 %>%
set.seed()
library(seastests)
n <- seq(15, 500, 5)
variances <- seq(1, 4, 1)
power_list <- matrix(0, length(n),
length(variances))
colnames(power_list) <- variances
rownames(power_list) <- n
power_list
cat("****\nFor seasons = 12\n****\n")
for (k in seq_along(variances)) {
p <- rep(variances[k], length(n))
prob.trial <- matrix(0, length(n), length(p))
power.trial <- numeric(length(n))
for (j in 1:length(n)) {
for (i in 1:length(p)) {
data.trial <- arima.sim(n = n[j], model = list(sar = 0.8,
nseasons = 12, sigma2 = p[i]))
c.trial <- combined_test(data.trial, freq = 12)
prob.trial[j, i] <- c.trial$Pval
}
power.trial[j] <- 1 - (sum(prob.trial[j, ] > 0.05) / length(p))
}
power_list[, k] <- power.trial
}
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
sample_df
sample_df = rbind(c(sample_1, sample_2, sample_3, sample_4))
sample_df
sample_df = matrix(rbind(c(sample_1, sample_2, sample_3, sample_4)))
sample_df
sample_df = matrix(rbind(c(sample_1, sample_2, sample_3, sample_4)), ncol = 4)
sample_df
colnames(sample_df) = c("sample_1", "sample_2", "sample_3", "sample_4")
sample_df
sample_df = as.data.frame(sample_df)
sample_df
colMeans(sample_df)
length(sample_df[,1])
library(tidyverse)
sample_df %>%
glimpse()
sample_df %>%
View()
s = as.data.frame(as.matrix(cbind(c("sample_1", "sample_2", "sample_3", "sample_4"))))
s
14, 16, 12, 19, 21, 19, 15)
sample_1 = c(18, 29, 10, 14, 16, 12, 19, 21, 19, 15)
sample_2 = c(17, 12, 27, 22, 20, 11, 20, 24, 16, 17)
sample_3 = c(18, 23, 19, 17, 34, 14, 23, 20, 21, 14)
sample_4 = c(16, 23, 14, 20, 14, 11, 23, 15, 17, 17)
s = as.data.frame(as.matrix(cbind(c("sample_1", "sample_2", "sample_3", "sample_4"))))
s
s = as.data.frame(as.matrix(cbind(c("sample_1", "sample_2", "sample_3", "sample_4"))), ncol=10)
s
s = data.frame(matrix(cbind(c("sample_1", "sample_2", "sample_3", "sample_4"))), ncol=10)
s
s = data.frame(matrix(cbind(c(sample_1, sample_2, sample_3, sample_4))), ncol=10)
s
s = cbind(c(sample_1, sample_2, sample_3, sample_4))
s
s = matrix(cbind(c(sample_1, sample_2, sample_3, sample_4)), nrow = 4)
s
s = matrix(rbind(c(sample_1, sample_2, sample_3, sample_4)), nrow = 4)
s
s = matrix(c(18, 29, 10, 14, 16, 12, 19, 21, 19, 15,
17, 12, 27, 22, 20, 11, 20, 24, 16, 17,
18, 23, 19, 17, 34, 14, 23, 20, 21, 14,
16, 23, 14, 20, 14, 11, 23, 15, 17, 17), nrow = 4)
s
s = matrix(c(18, 29, 10, 14, 16, 12, 19, 21, 19, 15,
17, 12, 27, 22, 20, 11, 20, 24, 16, 17,
18, 23, 19, 17, 34, 14, 23, 20, 21, 14,
16, 23, 14, 20, 14, 11, 23, 15, 17, 17), nrow = 4, byrow = T)
s
s_df = as.data.frame(s)
rownames(s) = c("sample_1", "sample_2", "sample_3", "sample_4")
s_df = as.data.frame(s)
s_df
s_df %>%
View()
s_df %>%
mutate(s_means[,1] = sum(sample_1) / length(sample_1))
s_df %>%
mutate(s_means = sum(sample_1) / length(sample_1))
View()
s_df %>%
mutate(s_means = sum(sample_1) / length(sample_1))
View()
s_df %>%
mutate(s_means = sum(sample_1) / length(sample_1))
View()
View(.)
s_df %>%
mutate(s_means = sum(sample_1) / length(sample_1))
s_df %>%
mutate(s_means[,1] = sum(sample_1) / length(sample_1))
s_df %>%
mutate(s_means[,1] = sum(sample_1) / length(sample_1))
write.csv(s_df, "emryse.csv")
library(tidyverse)
mtcars
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt))
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point()
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline(lm)
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline()
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline(lm(mpg~wt))
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline(lm(mpg ~ wt))
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline(lm(mpg ~ wt, data = .))
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline(lm(mpg ~ wt, data = mtcars))
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline(aes(lm(mpg ~ wt, data = mtcars)))
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline(aes(lm(mpg ~ wt)))
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_line()
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline()
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline() +
facet_wrap(~cyl)
library(tidyverse)
mtcars %>%
lm(mpg ~ wt) %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline() +
facet_wrap(~cyl)
library(tidyverse)
mtcars %>%
select(mpg, wt) %>%
lm(mpg ~ wt) %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline() +
facet_wrap(~cyl)
library(tidyverse)
mtcars %>%
select(mpg, wt) %>%
lm(mpg ~ wt)
library(tidyverse)
mtcars %>%
select(mpg, wt) %>%
lm(mpg,wt)
library(tidyverse)
mtcars %>%
select(mpg, wt) %>%
lm(aes(mpg,wt))
library(tidyverse)
mtcars %>%
select(mpg, wt) %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline() +
facet_wrap(~cyl)
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_abline() +
facet_wrap(~cyl)
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_line() +
facet_wrap(~cyl)
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_smooth() +
facet_wrap(~cyl)
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_smooth(method=lm) +
facet_wrap(~cyl)
library(tidyverse)
mtcars %>%
ggplot(aes(mpg,wt)) +
geom_point() +
geom_smooth(method=lm, se=F) +
facet_wrap(~cyl)
source("~/.active-rstudio-document")
install.packages("shiny")
library(shiny)
# library(shiny)
runExample("01_hello")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp(Shiny_app)
runApp("Shiny_app")
runApp("Shiny_app")
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
library(shiny)
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app')
install.packages(c("shiny", "shinythemes"))
install.packages(c("shiny", "shinythemes"))
install.packages(c("shiny", "shinythemes"))
install.packages(c("shiny", "shinythemes"))
install.packages(c("shiny", "shinythemes"))
install.packages(c("shiny", "shinythemes"))
library(shiny); runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
library(knitr)
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
library(shiny); runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
library(shiny); runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='op9nhe-ronald-anim',
token='0FBBA657D039035DBBDA74E66C72B393',
secret='qb7RQFkAuBz3ubjfdPwgmDds40Rnbk7h24GYMgrY')
rsconnect::deployApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
rsconnect::deployApp('my_app.R')
library(shiny); runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/my_app.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/rsconnect/my_app.R')
install.packages('rsconnect')
install.packages('rsconnect')
install.packages("rsconnect")
library(rsconnect)
library(shiny)
runApp()
source('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app/run.R')
library(shiny)
runApp()
source('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app/run.R')
rlang::last_trace()
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app')
source('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app/run.R')
source('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app/run.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app')
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
saveRDS(model, "model.rds")
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
saveRDS(model, "model.rds")
model
source("C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app/model.R")
install.packages("caret")
source("C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app/model.R")
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app/app_num.R')
source("C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app/model.R")
model
source("C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app/model.R")
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
str(iris)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
iris$Species = as.factor(iris$Species)
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
iris$Species = as.factor(iris$Species)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
iris
TrainSet
str(TrainSet)
TrainSet$Species = as.factor(TrainSet$Species)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
iris$Species = as.factor(iris$Species)
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
TestingSet <- iris[-TrainingIndex,] # Test Set
write.csv(TrainingSet, "training.csv")
write.csv(TestingSet, "testing.csv")
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
TrainSet$Species = as.factor(TrainSet$Species)
model <- randomForest(Species ~ ., data = TrainSet, ntree = 500, mtry = 4, importance = TRUE)
# Save model to RDS file
saveRDS(model, "model.rds")
model
# Save model to RDS file
saveRDS(model, "model.rds")
library(shiny); runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app/app_num.R')
iris$Species = factor(iris$Species)
source("C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Test_app/model.R")
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
# Performs stratified random split of the data set
TrainingIndex <- createDataPartition(iris$Species, p=0.8, list = FALSE)
TrainingSet <- iris[TrainingIndex,] # Training Set
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
iris$Species = as.factor(iris$Species)
# Importing libraries
library(RCurl) # for downloading the iris CSV file
library(randomForest)
library(caret)
# Importing the Iris data set
iris <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/iris.csv") )
iris$Species = as.factor(iris$Species)
source("G:/Skills/7515496/7515496/iris_model.R")
shiny::runApp('G:/Skills/7515496/7515496')
runApp('G:/Skills/7515496/7515496/bmi.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/bmi.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/bmi.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/bmi.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/bmi.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/bmi.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/bmi.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/bmi.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/bmi.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/bmi.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/bmi.R')
srt(weather)
str(weather)
# Read data
weather <- read.csv(text = getURL("https://raw.githubusercontent.com/dataprofessor/data/master/weather-weka.csv") )
str(weather)
weather$outlook = as.factor(weather$outlook)
weather$play = as.factor(weather$play)
str(weather)
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/bmi.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/golf.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/golf.R')
runApp('C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi/golf.R')
setwd("C:/Users/Sampson/Desktop/RONNIE/Shiny_app/bmi")
setwd("C:/Users/Sampson/Desktop/RONNIE/Shiny_app/Golf")
runApp('golf.R')
